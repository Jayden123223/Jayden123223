local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/Jayden123223/Jayden123223/refs/heads/main/MainUI'))()

local Window = Rayfield:CreateWindow({
    Name = "Murder Mystery 2 Script",
    LoadingTitle = "Murder Mystery 2",
    LoadingSubtitle = "By SxmlyMoe",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil, -- Optional: Specify a folder name for saved settings
        FileName = "Big Hub" -- The name of the file to save configuration settings
    },
    KeySystem = true, -- Disable the key system
    KeySettings = {
        Title = "Murder Mystery 2 | Key",
        Subtitle = "On my Roblox Profile",
        FileName = "Key",
        SaveKey = false,
        GrabKeyFromSite = true,
        Key = "Test"
    }
})

-- Creating a new tab and section
local MainTab = Window:CreateTab("Home", nil) -- Title, Image (set to nil for no image)
local ESPTab = Window:CreateTab("ESP", nil) -- New tab for ESP features
local PlayerTab = Window:CreateTab("Player", nil) -- New tab for Player features
local TeleportTab = Window:CreateTab("Teleport",nil) -- New tab for Teleport features
local SettingTab = Window:CreateTab("Settings",nil) -- New tab for Teleport features
local LobbyTab = Window:CreateTab("Lobby",nil) -- New tab for Teleport features

-- Adding sections to tabs
local MainSection = MainTab:CreateSection("Main")
local ESPSection = ESPTab:CreateSection("ESP Features - Turn On/Off Every Round!")
local TeleportSection = TeleportTab:CreateSection("Teleport Features ")
local PlayerSection = PlayerTab:CreateSection("Player Features ")
local SettingSection = SettingTab:CreateSection("Random Features")


local originalFOV = workspace.CurrentCamera.FieldOfView  -- Store the original FOV
local fovon = false  -- Track FOV state

-- Function to toggle FOV
local function toggleFOV(state)
    fovon = state  -- Set the FOV state based on the toggle
    print(fovon and "FOV Enabled!" or "FOV Disabled!")
end


-- Keep updating the FOV while the toggle is enabled
game:GetService("RunService").Heartbeat:Connect(function()
    workspace.CurrentCamera.FieldOfView = fovon and 100 or 70
end)


-- Create the FOV toggle button using Rayfield
PlayerTab:CreateToggle({
    Name = "FOV",  -- Name of the toggle
    CurrentValue = fovon,  -- Default value (whether FOV is on or off)
    Flag = "EnableFOV",  -- Flag for saving the toggle state
    Callback = toggleFOV  -- Callback to the toggleFOV function
})
-- Murderer ESP TAB
local MurdererESPToggle = ESPTab:CreateToggle({
    Name = "Murderer ESP", -- Name of the toggle
    CurrentValue = false, -- Default value
    Flag = "EnableMurdererESP", -- Flag for saving the toggle state
    Callback = function(state)
        if state then
            print("Murderer ESP Enabled!")
            for _, player in pairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer and player.Backpack:FindFirstChild("Knife") then
                    if not player.Character:FindFirstChild("MurdererHighlight") then
                        local highlight = Instance.new("Highlight")
                        highlight.Name = "MurdererHighlight"
                        highlight.Adornee = player.Character
                        highlight.Parent = player.Character
                        highlight.FillColor = Color3.new(1, 0, 0) -- Red for Murderer
                    end
                end
            end
        else
            print("Murderer ESP Disabled!")
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("MurdererHighlight") then
                    player.Character.MurdererHighlight:Destroy()
                end
            end
        end
    end
})

-- Sheriff ESP TAB
local SheriffESPToggle = ESPTab:CreateToggle({
    Name = "Sheriff ESP", -- Name of the toggle
    CurrentValue = false, -- Default value
    Flag = "EnableSheriffESP", -- Flag for saving the toggle state
    Callback = function(state)
        if state then
            print("Sheriff ESP Enabled!")
            for _, player in pairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer and player.Backpack:FindFirstChild("Gun") then
                    if not player.Character:FindFirstChild("SheriffHighlight") then
                        local highlight = Instance.new("Highlight")
                        highlight.Name = "SheriffHighlight"
                        highlight.Adornee = player.Character
                        highlight.Parent = player.Character
                        highlight.FillColor = Color3.new(0, 0, 1) -- Blue for Sheriff
                    end
                end
            end
        else
            print("Sheriff ESP Disabled!")
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("SheriffHighlight") then
                    player.Character.SheriffHighlight:Destroy()
                end
            end
        end
    end
})

-- Innocent ESP TAB
local InnocentESPToggle = ESPTab:CreateToggle({
    Name = "Innocent ESP", -- Name of the toggle
    CurrentValue = false, -- Default value
    Flag = "EnableInnocentESP", -- Flag for saving the toggle state
    Callback = function(state)
        if state then
            print("Innocent ESP Enabled!")
            for _, player in pairs(game.Players:GetPlayers()) do
                if player ~= game.Players.LocalPlayer and not player.Backpack:FindFirstChild("Knife") and not player.Backpack:FindFirstChild("Gun") then
                    if not player.Character:FindFirstChild("InnocentHighlight") then
                        local highlight = Instance.new("Highlight")
                        highlight.Name = "InnocentHighlight"
                        highlight.Adornee = player.Character
                        highlight.Parent = player.Character
                        highlight.FillColor = Color3.new(0, 1, 0) -- Green for Innocent
                    end
                end
            end
        else
            print("Innocent ESP Disabled!")
            for _, player in pairs(game.Players:GetPlayers()) do
                if player.Character and player.Character:FindFirstChild("InnocentHighlight") then
                    player.Character.InnocentHighlight:Destroy()
                end
            end
        end
    end
})



-- PLAYER TAB
local Input

PlayerTab:CreateInput({
    Name = "Jump Power", -- Name of the input field
    PlaceholderText = "50-200", -- Placeholder text displayed in the input field
    RemoveTextAfterFocusLost = true, -- Option to remove text after losing focus
    Callback = function(Text)
        local JumpPower = tonumber(Text) -- Convert the input text to a number
        if JumpPower and JumpPower >= 50 and JumpPower <= 200 then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = JumpPower
            print("Jump Power set to:", JumpPower)
        else
            print("Invalid input. Please enter a number between 50 and 200.")
        end
    end
})

PlayerTab:CreateInput({
    Name = "Walk Speed", -- Name of the input field
    PlaceholderText = "15-25", -- Placeholder text displayed in the input field
    RemoveTextAfterFocusLost = true, -- Option to remove text after losing focus
    Callback = function(Text)
        local WalkSpeed = tonumber(Text) -- Convert the input text to a number
        if WalkSpeed and WalkSpeed >= 16 and WalkSpeed <= 25 then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = WalkSpeed
            print("Walk Speed set to:", WalkSpeed)
        else
            print("Invalid input. Please enter a number between 15 and 25.")
        end
    end
})

PlayerTab:CreateButton({
    Name = "Reset to Default", -- Name of the button
    Callback = function()
        local player = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            local humanoid = player.Character.Humanoid
            humanoid.WalkSpeed = 16 -- Default WalkSpeed
            humanoid.JumpPower = 50 -- Default JumpPower
            print("WalkSpeed and JumpPower reset to default values.")
        else
            print("Failed to find the Humanoid object.")
        end
    end
})








local testSection = PlayerTab:CreateSection("Player Killing")

PlayerTab:CreateButton({
    Name = "Kill All (Murderer)",  -- Name of the button
    Flag = "KillAllButton",  -- Unique flag for saving/loading the state
    Callback = function()
        -- Check if the player has a "Knife" in their backpack or character
        if game.Players.LocalPlayer.Backpack:FindFirstChild("Knife") ~= nil or game.Workspace[game.Players.LocalPlayer.Name]:FindFirstChild("Knife") ~= nil then
            local players = game:GetService("Players")
            -- Loop through all players in the game
            for _, player in pairs(players:GetPlayers()) do
                -- Skip the current player (do not kill yourself)
                if player.Name ~= game.Players.LocalPlayer.Name then
                    repeat
                        wait() -- Wait until the player dies
                        -- Teleport the local player's character to the target player's character's HumanoidRootPart
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 1)
                    until player.Character.Humanoid.Health == 0 -- Exit the loop when the player dies
                end
            end
        else
            print("[ERROR] You are not a murderer!!!") -- Display an error if the player doesn't have the Knife
        end
    end,
})


-- Create B-Tools Button
MainTab:CreateButton({
    Name = "B-Tools",  -- Name of the button
    Flag = "TeleportToMurderButton",  -- Unique flag for saving/loading the state
    Callback = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/JpEmyNa0"))()  
    end,
})


--[[
-- TELEPORT TAB
local Dropdown = TeleportTab:CreateDropdown({
    Name = "Select Area",  -- Name of the dropdown
    Options = {"Spawn", "Map"},  -- Options in the dropdown
    CurrentOption = "Spawn",  -- Default selected option
    MultipleOptions = false,  -- Only one option can be selected at a time
    Flag = "Dropdown1",  -- Unique flag for saving/loading config
    
    -- Callback function that is triggered when the selected option changes
    Callback = function(Option)
        -- Option is a string that contains the selected option
        print("Selected Area: " .. Option)
        
        if Option == "Spawn" then
            -- Ensure the character is loaded before teleporting
            local character = game.Players.LocalPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                -- Teleport to the spawn location
                character.HumanoidRootPart.CFrame = CFrame.new(-185, 137, 19)
            else
                -- Wait for the character to be fully loaded if it's not yet available
                game.Players.LocalPlayer.CharacterAdded:Wait()
                local newCharacter = game.Players.LocalPlayer.Character
                newCharacter.HumanoidRootPart.CFrame = CFrame.new(-185, 137, 19)
            end
        elseif Option == "Map" then
            print("Teleporting to Map...")
            
            -- Check if the Map location exists in workspace
            local mapLocation = workspace:FindFirstChild("Map")
            if mapLocation then
                -- Make sure the player is fully loaded and the character exists before moving
                local character = game.Players.LocalPlayer.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    -- Move the character to the map location
                    character.HumanoidRootPart.CFrame = mapLocation.CFrame
                else
                    warn("Character or HumanoidRootPart not found!")
                end
            else
                warn("Map not found!")
            end
        end
    end,
})
]]

-- Creating a button for teleporting to "Murder" area in MM2
local Button = TeleportTab:CreateButton({
    Name = "Teleport to Murder",  -- Name of the button
    Flag = "TeleportToMurderButton",  -- Unique flag for saving/loading the state
    
    -- Callback function that is triggered when the button is clicked
    Callback = function()
        print("Teleporting to Murder...")

        local murdererFound = false
        -- Loop through all players and check if they have a Knife in their Backpack
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character then
                -- Check if the player is the Murderer (has a Knife in their Backpack)
                if player.Backpack:FindFirstChild("Knife") then
                    print("Murderer found: " .. player.Name)
                    -- Teleport the player to the Murderer
                    game.Players.LocalPlayer.Character:MoveTo(player.Character.HumanoidRootPart.Position)
                    murdererFound = true
                    break  -- Stop the loop once the Murderer is found
                end
            end
        end
        
        if not murdererFound then
            print("No Murderer found (no Knife).")
        end
    end,
})

--[[
local Button = TeleportTab:CreateButton({
    Name = "Teleport to MM2 Gun                                                     (NOT WORKING)",  -- Name of the button
    Flag = "TeleportToMM2GunButton",  -- Unique flag for saving/loading the state
    
    -- Callback function that is triggered when the button is clicked
    Callback = function()
        print("Teleporting to MM2 Gun...")

        local gunFound = false
        -- Loop through all players and check if they have the Gun in their Backpack
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character then
                -- Check if the player has the Gun in their Backpack
                if player.Backpack:FindFirstChild("Gun") then
                    print("Gun found with player: " .. player.Name)
                    -- Teleport the player to the Gun
                    local gun = player.Backpack:FindFirstChild("Gun")
                    if gun then
                        -- You can teleport to the position of the gun or other specifics
                        game.Players.LocalPlayer.Character:MoveTo(gun.Position)
                        gunFound = true
                        break  -- Stop the loop once the Gun is found
                    end
                end
            end
        end
        
        if not gunFound then
            print("No Gun found in player's Backpack.")
        end
    end,
})

]]

-- MAAIN CHARACTER TELEPORTS
local MainSection = TeleportTab:CreateSection("Player Teleports")
-- Tleport
TeleportTab:CreateButton({
    Name = "Teleports player 10 studs forward",  -- Name of the button
    Flag = "TeleportToMurderButton2",  -- Unique flag for saving/loading the state
    Callback = function()
        game.Players.LocalPlayer.Character.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(0, 0, -10)
    end,
})
TeleportTab:CreateButton({
    Name = "Teleports player 10 studs up",  -- Name of the button
    Flag = "TeleportToMurderButton2",  -- Unique flag for saving/loading the state
    Callback = function()
        game.Players.LocalPlayer.Character.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(0, 10, 0)
    end,
})
TeleportTab:CreateButton({
    Name = "Teleports player 10 studs down",  -- Name of the button
    Flag = "TeleportToMurderButton2",  -- Unique flag for saving/loading the state
    Callback = function()
        game.Players.LocalPlayer.Character.PrimaryPart.CFrame = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.new(0, -10, 0)
    end,
})

TeleportTab:CreateButton({
    Name = "Coordinates Grabber", "Execute Coordinates Grabber Gui",  -- Name of the button
    Flag = "TeleportToMurderButton2",  -- Unique flag for saving/loading the state
    Callback = function()
        loadstring(game:HttpGet("https://pastebin.com/raw/M4TtucPi", true))()
    end,
})


local MainSection = TeleportTab:CreateSection("Dark Dex")

TeleportTab:CreateButton({
    Name = "Dark Dex",  -- Name of the button
    Flag = "TeleportToMurderButton2",  -- Unique flag for saving/loading the state
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/MariyaFurmanova/Library/main/dex2.0", true))()
    end,
})



--[[
MainTab:CreateButton({
    Name = "Testing1",  -- Name of the button
    Flag = "TeleportToMurderButton2",  -- Unique flag for saving/loading the state
    Callback = function()

    end,
})

]]





-- LOBBY TAB

local LobbySection = LobbyTab:CreateSection("Vote For Maps (Resets 3 times)")
LobbyTab:CreateButton({
    Name = "Teleport to Pad 1",  -- Name of the button
    Flag = "TeleportToMurderButton3",  -- Unique flag for saving/loading the state
    Callback = function()
        local part = game.Workspace.Lobby.MapVote.VotePad1:FindFirstChild("Pad")  -- Find pad in the Workspace
        if part then
            local teleportCount = 0  -- Initialize the teleport counter
            local player = game.Players.LocalPlayer

            -- Function to handle the teleport, reset, and repeat logic
            local function teleportAndReset()
                -- Check if teleportCount is less than 3 to continue teleporting
                if teleportCount < 2 then
                    teleportCount = teleportCount + 1  -- Increment the teleport counter
                    local character = player.Character or player.CharacterAdded:Wait()  -- Ensure character is loaded

                    -- Teleport the player to the specified part
                    character:SetPrimaryPartCFrame(part.CFrame)  -- Teleport to the pad's CFrame
                    print("Teleported to pad - Attempt " .. teleportCount)

                    -- Wait for 2 seconds before resetting and teleporting again
                    wait(2)

                    -- Set the player's health to 0 to trigger respawn (forcefully kill character)
                    local humanoid = character:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid.Health = 0  -- Set health to 0 to cause the character to die
                    end

                    -- Wait for the character to respawn and then reset position
                    player.CharacterAdded:Wait()  -- Wait for the respawn
                    print("Character respawned")

                    -- After respawn, call the teleport function again after an additional delay
                    wait(2)  -- Add an additional delay before the next teleport
                    teleportAndReset()  -- Recursive call for the next teleport
                else
                    print("Teleporting stopped after 3 attempts.")
                end
            end

            -- Start the teleporting process
            teleportAndReset()

        else
            print("Pad not found in the Workspace")  -- Error handling if pad is missing
        end
    end,
})

LobbyTab:CreateButton({
    Name = "Teleport to Pad 2",  -- Name of the button
    Flag = "TeleportToMurderButton3",  -- Unique flag for saving/loading the state
    Callback = function()
        local part = game.Workspace.Lobby.MapVote.VotePad2:FindFirstChild("Pad")  -- Find pad in the Workspace
        if part then
            local teleportCount = 0  -- Initialize the teleport counter
            local player = game.Players.LocalPlayer

            -- Function to handle the teleport, reset, and repeat logic
            local function teleportAndReset()
                -- Check if teleportCount is less than 3 to continue teleporting
                if teleportCount < 2 then
                    teleportCount = teleportCount + 1  -- Increment the teleport counter
                    local character = player.Character or player.CharacterAdded:Wait()  -- Ensure character is loaded

                    -- Teleport the player to the specified part
                    character:SetPrimaryPartCFrame(part.CFrame)  -- Teleport to the pad's CFrame
                    print("Teleported to pad - Attempt " .. teleportCount)

                    -- Wait for 2 seconds before resetting and teleporting again
                    wait(2)

                    -- Set the player's health to 0 to trigger respawn (forcefully kill character)
                    local humanoid = character:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid.Health = 0  -- Set health to 0 to cause the character to die
                    end

                    -- Wait for the character to respawn and then reset position
                    player.CharacterAdded:Wait()  -- Wait for the respawn
                    print("Character respawned")

                    -- After respawn, call the teleport function again after an additional delay
                    wait(2)  -- Add an additional delay before the next teleport
                    teleportAndReset()  -- Recursive call for the next teleport
                else
                    print("Teleporting stopped after 3 attempts.")
                end
            end

            -- Start the teleporting process
            teleportAndReset()

        else
            print("Pad not found in the Workspace")  -- Error handling if pad is missing
        end
    end,
})

LobbyTab:CreateButton({
    Name = "Teleport to Pad 3",  -- Name of the button
    Flag = "TeleportToMurderButton3",  -- Unique flag for saving/loading the state
    Callback = function()
        local part = game.Workspace.Lobby.MapVote.VotePad3:FindFirstChild("Pad")  -- Find pad in the Workspace
        if part then
            local teleportCount = 0  -- Initialize the teleport counter
            local player = game.Players.LocalPlayer

            -- Function to handle the teleport, reset, and repeat logic
            local function teleportAndReset()
                -- Check if teleportCount is less than 3 to continue teleporting
                if teleportCount < 2 then
                    teleportCount = teleportCount + 1  -- Increment the teleport counter
                    local character = player.Character or player.CharacterAdded:Wait()  -- Ensure character is loaded

                    -- Teleport the player to the specified part
                    character:SetPrimaryPartCFrame(part.CFrame)  -- Teleport to the pad's CFrame
                    print("Teleported to pad - Attempt " .. teleportCount)

                    -- Wait for 2 seconds before resetting and teleporting again
                    wait(2)

                    -- Set the player's health to 0 to trigger respawn (forcefully kill character)
                    local humanoid = character:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid.Health = 0  -- Set health to 0 to cause the character to die
                    end

                    -- Wait for the character to respawn and then reset position
                    player.CharacterAdded:Wait()  -- Wait for the respawn
                    print("Character respawned")

                    -- After respawn, call the teleport function again after an additional delay
                    wait(2)  -- Add an additional delay before the next teleport
                    teleportAndReset()  -- Recursive call for the next teleport
                else
                    print("Teleporting stopped after 3 attempts.")
                end
            end

            -- Start the teleporting process
            teleportAndReset()

        else
            print("Pad not found in the Workspace")  -- Error handling if pad is missing
        end
    end,
})


--- SETTGINS TAB
SettingTab:CreateSlider({
    Name = "Fog Distance Slider", -- The name of the slider
    Range = {100, 1000},         -- The min and max values for fog distance
    Increment = 10,              -- The step size when adjusting the slider
    Suffix = " studs",           -- Suffix to display after the value (e.g., "studs")
    CurrentValue = 750,          -- The initial value of the slider
    Flag = "FogSlider",          -- A unique flag identifier for this slider
    
    -- Callback function that gets called whenever the slider value changes
    Callback = function(Value)
        local lighting = game.Lighting
        lighting.FogEnd = Value -- Adjust the FogEnd property based on the slider value
        print("FogEnd set to: " .. Value .. " studs") -- Optional feedback
    end,
})

SettingTab:CreateSlider({
    Name = "Clock Time Slider", -- The name of the slider
    Range = {0, 24},            -- The min and max values for the clock (0-24 hours)
    Increment = 1,              -- The step size when adjusting the slider
    Suffix = " Hours",          -- Suffix to display after the value (e.g., " Hours")
    CurrentValue = 12,          -- The initial value of the slider (e.g., 12:00 noon)
    Flag = "ClockTimeSlider",   -- A unique flag identifier for this slider
    
    -- Callback function that gets called whenever the slider value changes
    Callback = function(Value)
        local lighting = game.Lighting
        lighting.ClockTime = Value -- Adjust the ClockTime based on the slider value
        print("ClockTime set to: " .. Value .. " hours") -- Optional feedback
    end,
})

-- Slider for adjusting Brightness
SettingTab:CreateSlider({
    Name = "Brightness Slider", -- The name of the slider
    Range = {0, 10},            -- The min and max values for brightness
    Increment = 0.1,            -- The step size when adjusting the slider
    Suffix = "",                -- No suffix needed for brightness
    CurrentValue = 2,           -- The initial value of the slider (default brightness)
    Flag = "BrightnessSlider",  -- A unique flag identifier for this slider
    
    -- Callback function that gets called whenever the slider value changes
    Callback = function(Value)
        local lighting = game.Lighting
        lighting.Brightness = Value -- Adjust the Brightness based on the slider value
        print("Brightness set to: " .. Value) -- Optional feedback
    end,
})

